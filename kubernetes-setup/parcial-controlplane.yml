---
- hosts: controlplane
  become: true

  tasks:
    - name: Configure node_ip
      set_fact:
        node_ip: "{{ node_ip | default(ansible_default_ipv4.address) }}"

    - debug: var=node_ip

    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init --apiserver-advertise-address="{{ node_ip }}" --apiserver-cert-extra-sans="{{ node_ip }}"  --node-name k8s-controlplane --pod-network-cidr=192.168.0.0/16 --cri-socket unix:///var/run/cri-dockerd.sock
      args: 
         creates: /etc/kubernetes/manifests/kube-apiserver.yaml

    - name: Get current user UID
      command: "id -u {{ ansible_user }}"
      changed_when: false
      register: ansible_uid

    - name: Get current user GID
      command: "id -g {{ ansible_user }}"
      changed_when: false
      register: ansible_gid

    - name: Setup kubeconfig for user
      command: "{{ item }}"
      changed_when: false 
      with_items:
      - mkdir -p "/home/{{ ansible_user }}/.kube" "/root/.kube"
      - cp /etc/kubernetes/admin.conf /home/{{ ansible_user }}/.kube/config
      - cp /etc/kubernetes/admin.conf /root/.kube/config
      - cp  /etc/kubernetes/admin.conf /tmp/kubernetes_config.conf
      - chown "{{ ansible_uid.stdout_lines[0]  }}:{{ ansible_gid.stdout_lines[0] }}" "/home/{{ ansible_user }}/.kube/config"

    - name: Copy kubeconfig to localhost
      fetch:
        src: /tmp/kubernetes_config.conf
        dest: ../
        flat: yes

    - name: Get the latest version of wavenet
      shell: curl -s https://api.github.com/repos/weaveworks/weave/releases/latest | jq -r '.tag_name' | head -n1
      register: wavenet_latest_url
      ignore_errors: True

    - name: Install wavenet pod network
      command: kubectl apply -f https://github.com/weaveworks/weave/releases/download/{{wavenet_latest_url.stdout}}/weave-daemonset-k8s.yaml
      args: 
         creates: /opt/cni/bin/weave-net

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command
      changed_when: false

    - name: Copy join command to worker nodes
      become: false
      delegate_to: "{{ item }}"
      copy: 
        content: "{{ join_command.stdout_lines[0] }} --cri-socket unix:///var/run/cri-dockerd.sock" 
        dest: "/tmp/join-command"
        mode: 0755
      with_items: "{{groups['workers']}}"

  handlers:
    - name: docker status
      service: name=docker state=started
