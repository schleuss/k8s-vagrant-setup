---
- hosts: controlplane
  become: true

  tasks:
    - name: Configure node_ip
      set_fact:
        node_ip: "{{ node_ip | default(ansible_default_ipv4.address) }}"

    - name: Set server hostname 
      ansible.builtin.hostname:
        name: "{{ k8s_hostname }}"

    - name: Add IP address to /etc/hosts
      lineinfile: 
        dest: /etc/hosts
        line: '{{ node_ip }} {{ k8s_hostname }}'
        state: present

    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install docker and its dependecies
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - docker-ce 
        - docker-ce-cli 
        - containerd.io
      notify:
        - docker status

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Criar diretorios do docker
      file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      loop:
        - /etc/docker
        - /ect/systemd/system/docker.service.d

    - name: Copiar arquivo de configuração do docker
      copy:
        mode: 0644
        src: ./daemon.json
        dest: /etc/docker/daemon.json

    - name: Restart docker
      service:
        name: docker
        daemon_reload: yes
        state: restarted

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet 
          - kubeadm 
          - kubectl

    - name: Configure node ip
      lineinfile:
        create: yes
        mode: 0755
        path: /etc/default/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}

    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init --apiserver-advertise-address="{{ node_ip }}" --apiserver-cert-extra-sans="{{ node_ip }}"  --node-name k8s-controlplane --pod-network-cidr=192.168.0.0/16
      args: 
         creates: /etc/kubernetes/manifests/kube-apiserver.yaml

    - name: Get current user UID
      command: "id -u {{ ansible_user }}"
      changed_when: false
      register: ansible_uid

    - name: Get current user GID
      command: "id -g {{ ansible_user }}"
      changed_when: false
      register: ansible_gid      

    - name: Setup kubeconfig for user
      command: "{{ item }}"
      changed_when: false 
      with_items:
      - mkdir -p "/home/{{ ansible_user }}/.kube" /root/.kube
      - cp /etc/kubernetes/admin.conf /home/"{{ ansible_user }}"/.kube/config
      - cp /etc/kubernetes/admin.conf /root/.kube/config
      - chown "{{ ansible_uid.stdout_lines[0]  }}:{{ ansible_gid.stdout_lines[0] }}" "/home/{{ ansible_user }}/.kube/config"

    - name: Check vagrant directory
      stat:
        path: "/vagrant"
      register: vagrant_directory

    - name: Copy kubeconfig for vagrant
      command: "cp /etc/kubernetes/admin.conf /vagrant/kubernetes_config.conf"
      when: vagrant_directory.stat.exists   

    - name: Get k8s version string
      shell: set -o pipefail && kubectl version | base64 | tr -d '\n' 
      changed_when: false
      args:
        executable: /usr/bin/bash
      register: k8sversion

    
    - name: Install wavenet pod network
      command: kubectl apply -f https://cloud.weave.works/k8s/v1.16/net.yaml?k8s-version="{{ k8sversion.stdout_lines[0] }}"
      args: 
         creates: /opt/cni/bin/weave-net

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command
      changed_when: false

    - name: Copy join command to local file
      become: false
      delegate_to: 127.0.0.1
      copy: 
        content: "{{ join_command.stdout_lines[0] }}" 
        dest: "./join-command"
        mode: 0755
      
  handlers:
    - name: docker status
      service: name=docker state=started
