---
- become: true
  hosts: all
  tasks:
    - name: Configure node_ip
      set_fact:
        node_ip: "{{ node_ip | default(ansible_default_ipv4.address) }}"

    - debug: var=node_ip

    - name: Set server hostname 
      ansible.builtin.hostname:
        name: "{{ k8s_hostname }}"

    - name: Check ip address on hosts file
      lineinfile:
        state: absent
        path: "/etc/hosts"
        regexp: "{{ k8s_hostname }}"
      check_mode: true
      changed_when: false # This just makes things look prettier in the logs
      register: check

    - name: Add IP address to /etc/hosts
      lineinfile: 
        dest: /etc/hosts
        line: '{{ node_ip }} {{ k8s_hostname }}'
        state: present
      when: check.found == 0

    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - jq
        - net-tools
        - gnupg-agent
        - software-properties-common
        - nfs-common

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
        filename: docker

    - name: Install docker and its dependecies
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - docker-ce 
        - docker-ce-cli 
        - containerd.io
      notify:
        - docker status

    - name: Criar diretorios do docker
      file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      loop:
        - /etc/docker
        - /ect/systemd/system/docker.service.d

    - name: Copiar arquivo de configuração do docker
      copy:
        mode: 0644
        src: ./daemon.json
        dest: /etc/docker/daemon.json

    - name: Restart docker
      service:
        name: docker
        daemon_reload: yes
        state: restarted

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Check if cri-dockerd is installed
      command: dpkg-query -W cri-dockerd
      register: cri_dockerd_check_deb
      failed_when: cri_dockerd_check_deb.rc > 1
      changed_when: cri_dockerd_check_deb.rc == 1

    - name: Get the latest version of cri-dockerd
      shell: curl -s https://api.github.com/repos/Mirantis/cri-dockerd/releases/latest | jq -r '.assets[] | select(.content_type == "application/vnd.debian.binary-package") | {browser_download_url} | .browser_download_url' | grep focal
      register: cri_latest_url
      ignore_errors: True
      when: cri_dockerd_check_deb.rc == 1

    - name: Download cri-dockerd package
      get_url: 
        url="{{cri_latest_url.stdout}}"
        dest="/tmp/cri-dockerd.deb"
      when: cri_dockerd_check_deb.rc == 1

    - name: Install cri-dockerd
      apt: 
        deb="/tmp/cri-dockerd.deb"
      when: cri_dockerd_check_deb.rc == 1

    - name: Restart cri-dockerd
      service:
        name: cri-docker
        daemon_reload: yes
        state: restarted

    - name: Add an apt signing key for Kubernetes
      get_url: 
        url="https://packages.cloud.google.com/apt/doc/apt-key.gpg"
        dest="/usr/share/keyrings/kubernetes-archive-keyring.gpg"

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes

    - name: Install Kubernetes binaries
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet 
          - kubeadm 
          - kubectl


    - name: Check node conf for kubelet
      lineinfile:
        state: absent
        path: "/etc/default/kubelet"
        regexp: "--node-ip"
      check_mode: true
      changed_when: false
      register: check_kubelet_conf
      
    - name: Configure node ip
      lineinfile:
        create: yes
        mode: 0755
        path: /etc/default/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
      when: check_kubelet_conf.found == 0

    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

  handlers:
    - name: docker status
      service: name=docker state=started